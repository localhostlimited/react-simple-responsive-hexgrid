[{"C:\\source\\LocalhostLimited\\react-simple-responsive-hexgrid\\src\\index.js":"1","C:\\source\\LocalhostLimited\\react-simple-responsive-hexgrid\\src\\App.js":"2","C:\\source\\LocalhostLimited\\react-simple-responsive-hexgrid\\src\\hooks\\useWindowDimensions.js":"3"},{"size":1117,"mtime":1609372239669,"results":"4","hashOfConfig":"5"},{"size":3129,"mtime":1609370170012,"results":"6","hashOfConfig":"5"},{"size":872,"mtime":1609357881093,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1yby3tk",{"filePath":"10","messages":"11","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"C:\\source\\LocalhostLimited\\react-simple-responsive-hexgrid\\src\\index.js",["18"],"C:\\source\\LocalhostLimited\\react-simple-responsive-hexgrid\\src\\App.js",["19","20","21","22"],"import React from 'react';\nimport { GridGenerator, HexGrid, Layout, Hexagon, Text, Hex } from 'react-hexgrid';\nimport './App.css';\n\nexport default class App extends React.Component {\n  hexSize = 10;\n  hexagonSize = { x: this.hexSize, y: this.hexSize };\n\n  gridSize = 30;\n  hexUnitWidth = 7;\n  hexUnitHeight = this.gridSize / this.hexUnitWidth;\n\n  hasWindow = typeof window !== 'undefined';\n\n  constructor(props) {\n    super(props);\n    this.containerRef = React.createRef();\n    this.state = {}\n  }\n\n  getWindowDimensions() {\n    const width = this.hasWindow ? window.innerWidth : null;\n    const height = this.hasWindow ? window.innerHeight : null;\n    this.setState({ height, width })\n    return { height, width };\n  }\n\n  handleResize() {\n    const { height, width } = this.getWindowDimensions();\n\n    if (this.containerRef.current) {\n      this.gridHeight = this.containerRef.current.offsetHeight;\n      this.gridWidth = this.containerRef.current.offsetWidth;\n      // const maxHeight = Math.min(this.gridHeight, height);\n      // this.containerRef.current.maxHeight = maxHeight;\n      this.setState({ gridHeight: this.gridHeight, gridWidth: this.gridWidth })\n    }\n\n    console.log('resize', 'h', height, 'w', width, 'gh', this.gridHeight, 'gw', this.gridWidth);\n  }\n\n  getGridData(){\n    if(this.containerRef.current){\n      this.hexUnitWidth = this.containerRef.current.offsetWidth / 150;\n      this.hexUnitHeight = this.gridSize / this.hexUnitWidth;\n    }\n    return GridGenerator.orientedRectangle(this.hexUnitWidth, this.hexUnitHeight);\n  }\n\n  componentDidMount() {\n    const hasWindow = typeof window !== 'undefined';\n    if (hasWindow) {\n      window.addEventListener('resize', this.handleResize.bind(this));\n    }\n\n    this.handleResize(); // initialise\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  render() {\n    var vpHeight = 10*8.5;\n    var vpWidth = 13.3*8.5;\n    return (\n      <div className=\"App\" ref={this.containerRef}>\n\n        height: {this.state.height}\n        | width: {this.state.width}\n        | gridHeight: {this.containerRef?.current?.offsetHeight}\n        | maxGridHeight: {this.containerRef?.current?.maxHeight}\n        | gridWidth: {this.containerRef?.current?.offsetWidth}\n        <br />\n        viewport: x = 0, y = 0, width = {(this.hexUnitWidth * this.hexSize)}, height =  {this.hexUnitWidth * this.hexSize}\n        <br/>\n        raw hex width vs height unit: {this.hexUnitWidth/this.hexUnitHeight}\n        <br/>\n        display hex width vs height unit: {(2.5+this.hexUnitWidth*7.5)/(this.hexUnitHeight*8.66+4.33)}\n        <br/>\n        vp ratio: {vpWidth/vpHeight}\n        <br/>\n\n        <HexGrid className=\"red\" width={this.containerRef?.current?.offsetWidth} height={800}\n          viewBox={\"-10\" + \" \" + \"-3\" + \" \" + vpWidth + \" \" + vpHeight}>\n          <Layout size={this.hexagonSize} spacing={1} origin={{ x: 0, y: 0 }}>\n            {this.getGridData()?.map((hex, i) => <Hexagon key={i} q={hex.q} r={hex.r} s={hex.s}><Text>{hex.q  +\"|\"+ hex.r }</Text></Hexagon>)}\n          </Layout>\n        </HexGrid>\n      </div>\n    );\n  }\n}\n",["23","24"],"C:\\source\\LocalhostLimited\\react-simple-responsive-hexgrid\\src\\hooks\\useWindowDimensions.js",["25"],"// Thanks to giovannipds (SO: https://stackoverflow.com/a/59185109/10983456)\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport default function useWindowDimensions() {\r\n  const hasWindow = typeof window !== 'undefined';\r\n\r\n  function getWindowDimensions() {\r\n    const width = hasWindow ? window.innerWidth : null;\r\n    const height = hasWindow ? window.innerHeight : null;\r\n    return {\r\n      width,\r\n      height,\r\n    };\r\n  }\r\n\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    if (hasWindow) {\r\n      function handleResize() {\r\n        setWindowDimensions(getWindowDimensions());\r\n      }\r\n\r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [getWindowDimensions, hasWindow]);\r\n\r\n  return windowDimensions;\r\n}",["26","27"],{"ruleId":"28","severity":1,"message":"29","line":1,"column":17,"nodeType":"30","messageId":"31","endLine":1,"endColumn":26},{"ruleId":"28","severity":1,"message":"32","line":2,"column":57,"nodeType":"30","messageId":"31","endLine":2,"endColumn":60},{"ruleId":"33","severity":1,"message":"34","line":85,"column":26,"nodeType":"35","messageId":"36","endLine":85,"endColumn":27},{"ruleId":"33","severity":1,"message":"34","line":85,"column":32,"nodeType":"35","messageId":"36","endLine":85,"endColumn":33},{"ruleId":"33","severity":1,"message":"34","line":85,"column":39,"nodeType":"35","messageId":"36","endLine":85,"endColumn":40},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":7,"column":3,"nodeType":"43","endLine":14,"endColumn":4},{"ruleId":"37","replacedBy":"44"},{"ruleId":"39","replacedBy":"45"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Hex' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react-hooks/exhaustive-deps","The 'getWindowDimensions' function makes the dependencies of useEffect Hook (at line 27) change on every render. To fix this, wrap the definition of 'getWindowDimensions' in its own useCallback() Hook.","FunctionDeclaration",["46"],["47"],"no-global-assign","no-unsafe-negation"]